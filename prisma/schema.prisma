generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Tier {
  FREE
  PREMIUM
  PRO
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  // hashedPassword String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole?       @default(USER)
  tier          Tier            @default(FREE)
  organisations Organisation[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  joincode             String   @unique
  secret               String
  name                 String
  description          String?
  image                String?
  adminOrganisationIds String[] @db.ObjectId
  organisations        String[] @db.ObjectId
  hiddenEvents         String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organisation {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  username               String   @unique
  description            String?
  viewMoreLink           String?
  email                  String?
  contactNumber          String?
  verified               Boolean  @default(false)
  organisationMainUser   User     @relation(fields: [organisationMainUserId], references: [id], onDelete: Cascade)
  organisationMainUserId String   @db.ObjectId
  groups                 String[] @default([])
  events                 Event[]
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Event {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  image          String?
  startTime      String
  endTime        String
  date           DateTime
  host           String
  location       String?
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
